module.exports = {
    name: "john",
    category: "exploit",
    description: "",
    run: async (client, message, args) => {
        const { exec } = require('child_process');
        const fs = require('fs');
        const Discord = require('discord.js');
        var arguments = message.toString().slice((message.content).substr(0,message.content.indexOf(' ')).length + 1);
        
        if (args[0] == "help") {
            // displays information about JohnTheRipper
            const helpEmbed = new Discord.MessageEmbed()
                .setColor('#f01d0e')
                .setTitle('John - Help')
                .addField('Description', "John, also referred to as John the Ripper, is a free brute-force password cracking tool used to crack various amounts of password hashes (https://www.wired.com/2016/06/hacker-lexicon-password-hashing/).")
                .addField('Arguments', "[--passwordHash password_hash1,password_hash2,password_hash3,etc.] ~ specifies the password hashes that you want to crack\n[--list=formats] ~ displays all the hash formats that John the Ripper can brute force\n[--format=format_name] ~ specifies the format that you want to result to display in\n[--wordlist=wordlist_directory_and_name] ~ specifies the wordlist to be used for brute forcing; this is already done for you, using the rockyou.txt wordlist (https://www.computerworld.com/article/2522045/rockyou-hack-exposes-names--passwords-of-30m-accounts.html)")
                .addField('Example', "john --format=raw-md5 --passwordHash 5f4dcc3b5aa765d61d8327deb882cf99,49f68a5c8493ec2c0bf489821c21fc3b")
                .addField('More Information', 'http://www.openwall.com/john/')
            message.channel.send(helpEmbed);
        } else { // executes the "john" command locally and displays the output live
            if (arguments.includes("--wordlist")) {
                message.channel.send(`**An error has occured:** The argument for a wordlist file was specified. Please do not use this argument as I already do it for you.`);
                return;
            }
            var passHashes = arguments.substr(arguments.indexOf("--passwordHash")+15).split(" ")[0];
            arguments = arguments.replace("--passwordHash ", "").replace(passHashes, "");
            var passHashesSep = passHashes.replace(",", "\n");
            var hashFile = fs.createWriteStream(`files/${message.author.username}-hash`);
            hashFile.write(passHashesSep);
            hashFile.end();

            var child = exec(`./john/run/john --wordlist=wordlists/rockyou.txt ${arguments} files/${message.author.username}-hash`, {detached: true});
            message.channel.send("*Note: If you want to stop this tool before it completes, just enter one of the following keywords into this channel: `STOP` `EXIT` `QUIT`*");

            const filter = m => (m.content.includes("STOP") || m.content.includes("EXIT") || m.content.includes("QUIT")) && m.author == message.author;
            // starts a collector to check if the user wants to stop the tool's process
            const collector = message.channel.createMessageCollector(filter, { time: 1000000 });
            collector.on('collect', () => {
                // kills the process through its PID; just killing the process through child.kill() does not work properly
                exec(`kill -9 ${child.pid}`);
                exec(`kill -9 ${child.pid + 1}`)
            });

            // when data is gathered, prints it out
            child.stdout.on('data', (data) => {
                if (data.length > 2000) {
                    let command = client.commands.get("seperateMessage");
                    command.run(message, data);
                } else {
                    message.channel.send(data);
                }
            });
            
            // when data is gathered, prints it out
            child.stderr.on('data', (data) => {
                message.channel.send(data);
            });

            // when the child process is closed, displays to the user that it was
            child.on('close', () => {
                message.channel.send(`The John the Ripper (John) command executed by <@${message.author.id}> finished/was stopped.`);
                fs.unlinkSync(`files/${message.author.username}-hash`);
                collector.stop();
            });
        }
    }
}