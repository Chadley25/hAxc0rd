module.exports = {
    name: "hydra",
    category: "exploit",
    description: "",
    run: async (client, message, args) => {
        const { exec } = require('child_process');
        const Discord = require('discord.js');
        let arguments = message.toString().slice((message.content).substr(0,message.content.indexOf(' ')).length + 1);
        
        if (args[0] == "help") {
            // displays information about Hydra
            const helpEmbed = new Discord.MessageEmbed()
                .setColor('#f01d0e')
                .setTitle('Hydra - Help')
                .addField('Description', "Hydra is a tool used to brute-force logins over a wide range of protocols like MySQL, SSH, FTP, etc. With this, it allows people, like researchers and security consultants, to test and see how secure passwords really are for a service that uses one of the supported protocols.")
                .addField('Arguments', "[-h] ~ displays the complete help menu for Hydra\n[-l/L name] ~ specifies the login name(s) to be used for the brute forcing; you're only able to use -l in this case\n[-p/P] ~ specifies the password(s) to be used for brute forcing; this is already done for you, using the rockyou.txt wordlist (https://www.computerworld.com/article/2522045/rockyou-hack-exposes-names--passwords-of-30m-accounts.html)\n[-f] ~ stops and exits the Hydra tool when a login/pass pair is found")
                .addField('Examples', 'hydra -l saltlord 192.168.1.1 ssh\nhydra -l fanhater 10.0.1.70 smb -f\nhydra -l chad 172.16.49.12 mysql -f')
                .addField('More Information', 'https://github.com/vanhauser-thc/thc-hydra')    
            message.channel.send(helpEmbed);
        } else { // executes the "hydra" command locally and displays the output live
            if (arguments.includes("-P") || arguments.includes("-p")) {
                message.channel.send(`**An error has occured:** The argument for a password/password file was specified. Please do not use this argument as I already do it for you.`);
                return;
            }
            var child = exec(`hydra -P wordlists/rockyou.txt ${arguments}`, {detached: true});
            message.channel.send("*Note: If you want to stop this tool before it completes, just enter one of the following keywords into this channel: `STOP` `EXIT` `QUIT`*");

            const filter = m => (m.content.includes("STOP") || m.content.includes("EXIT") || m.content.includes("QUIT")) && m.author == message.author;
            // starts a collector to check if the user wants to stop the tool's process
            const collector = message.channel.createMessageCollector(filter, { time: 1000000 });
            collector.on('collect', () => {
                // kills the process through its PID; just killing the process through child.kill() does not work properly
                exec(`kill -9 ${child.pid}`);
                exec(`kill -9 ${child.pid + 1}`)
            });

            // when data is gathered, prints it out
            child.stdout.on('data', (data) => {
                if (data.length > 2000) {
                    let command = client.commands.get("seperateMessage");
                    command.run(message, data);
                } else {
                    message.channel.send(data);
                }
            });
            
            // when data is gathered, prints it out
            child.stderr.on('data', (data) => {
                message.channel.send(data);
            });

            // when the child process is closed, displays to the user that it was
            child.on('close', () => {
                message.channel.send(`The Hydra command executed by <@${message.author.id}> finished/was stopped.`);
                collector.stop();
            });
        }
    }
}